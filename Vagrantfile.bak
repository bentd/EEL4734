# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/focal64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
    # Customize the amount of memory on the VM:
    vb.memory = "8192"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # Use case sensitive filesystem for crosstool-ng
  # Add a private network using DHCP
  # config.vm.network "private_network", type: "dhcp"

  # Use case sensitive filesystem for crosstool-ng
  # Enable NFS synced folder
  # config.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_export: false

  config.vm.provider "virtualbox" do |vb|
    # Set a custom name for the VM
    vb.name = "Lab"  

  config.vm.provider "virtualbox" do |vb|
    vb.cpus = 3  # Set to the desired number of CPUs
  end  

  config.vm.provider "virtualbox" do |vb|

    # Enable USB support and specify the controller type
    vb.customize ["modifyvm", :id, "--usb", "on"]
    vb.customize ["modifyvm", :id, "--usbxhci", "on"] # use "--usbehci" for USB 2.0, or use "--usbxhci" for USB 3.0

    # # Add USB device filter (replace values with your device’s)
    # vb.customize ["usbfilter", "add", "0",
    #   "--target", :id,
    #   "--name", "BeagleBone Black",               # Name for reference
    #   "--vendorid", "0x1D6B",                  # Vendor ID in hexadecimal
    #   "--productid", "0x0104",                 # Product ID in hexadecimal
    #   # "--serialnumber", "123456789",           # Serial number (optional)
    #   # "--port", "1",                           # USB port number (optional)
    #   "--remote", "no"                         # "no" for local devices
    # ]
    # # Add USB device filter (replace values with your device’s)
    # vb.customize ["usbfilter", "add", "1",
    #   "--target", :id,
    #   "--name", "Prolific USB-Serial Controller",               # Name for reference
    #   "--vendorid", "0x067B",                  # Vendor ID in hexadecimal
    #   "--productid", "0x23A3",                 # Product ID in hexadecimal
    #   # "--serialnumber", "123456789",           # Serial number (optional)
    #   # "--port", "1",                           # USB port number (optional)
    #   "--remote", "no"                         # "no" for local devices
    # ]
    # # Add USB device filter (replace values with your device’s)
    # vb.customize ["usbfilter", "add", "1",
    #   "--target", :id,
    #   "--name", "Realtek USB3.0 Card Reader",               # Name for reference
    #   "--vendorid", "0x0BDA",                  # Vendor ID in hexadecimal
    #   "--productid", "0x0306",                 # Product ID in hexadecimal
    #   # "--serialnumber", "123456789",           # Serial number (optional)
    #   # "--port", "1",                           # USB port number (optional)
    #   "--remote", "no"                         # "no" for local devices
    # ]

    # Dynamically retrieve the VM name from VirtualBox
    vm_name = `VBoxManage list vms | grep "#{config.vm.box}" | awk '{print $1}' | tr -d '"'`.strip

    # Ensure vm_name is not empty
    if vm_name.empty?
      raise "Error: Could not find a registered VirtualBox machine for the Vagrant box '#{config.vm.box}'"
    end    

    $script = <<-'SCRIPT'
    echo "Shell Provisioner Creating USB Filters"

    # VM_NAME=$(VBoxManage list vms | grep '"#{config.vm.hostname}"' | awk '{print $1}' | tr -d '"')

    VM_NAME=#{vm_name}

    # Check and add filter for BeagleBone Black
    FILTER_EXISTS=$(VBoxManage showvminfo "$VM_NAME" --machinereadable | grep "usbfilter[0-9]*=.*BeagleBone Black")
    if [ -z "$FILTER_EXISTS" ]; then
      VBoxManage usbfilter add 0 --target "$VM_NAME" --name "BeagleBone Black" --vendorid 0x1D6B --productid 0x0104 --remote no
    fi

    # Check and add filter for Prolific USB-Serial Controller
    FILTER_EXISTS=$(VBoxManage showvminfo "$VM_NAME" --machinereadable | grep "usbfilter[0-9]*=.*Prolific USB-Serial Controller")
    if [ -z "$FILTER_EXISTS" ]; then
      VBoxManage usbfilter add 1 --target "$VM_NAME" --name "Prolific USB-Serial Controller" --vendorid 0x067B --productid 0x23A3 --remote no
    fi

    # Check and add filter for Realtek USB3.0 Card Reader
    FILTER_EXISTS=$(VBoxManage showvminfo "$VM_NAME" --machinereadable | grep "usbfilter[0-9]*=.*Realtek USB3.0 Card Reader")
    if [ -z "$FILTER_EXISTS" ]; then
      VBoxManage usbfilter add 1 --target "$VM_NAME" --name "Realtek USB3.0 Card Reader" --vendorid 0x0BDA --productid 0x0306 --remote no
    fi
    SCRIPT

    # Use a shell provisioner to handle USB filter logic
    # config.vm.provision "shell", inline: $script, run: "always" 

    # Add a trigger to run the script before `vagrant up`
    config.trigger.before :up do
      puts "Setting up USB filters on the host system"
      system($script)
    end

  end

  config.vm.provider "virtualbox" do |vb|
    # Set the graphics controller
    vb.customize ["modifyvm", :id, "--graphicscontroller", "VMSVGA"]
    
    # Optionally, set other display settings like VRAM size
    vb.customize ["modifyvm", :id, "--vram", "128"] # Set VRAM to 128MB
  end
end
